from __future__ import absolute_import, division, print_function, unicode_literals
import os
import librosa
import librosa.display
import numpy as np
import shutil
import random
import string
import warnings
import datetime

from tqdm import tqdm
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical
from keras.layers import Flatten, Dropout, Activation
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import BatchNormalization
from sklearn.model_selection import train_test_split
from tqdm import tqdm
warnings.filterwarnings("ignore")

def KeraAudioDetectionModel():        
    def __init__(self):
        self.classLabels = ('Angry', 'Fear', 'Disgust', 'Happy', 'Sad', 'Surprised', 'Neutral')
        self.numLabels = len(self.classLabels)
        self.in_shape = (39,216)        
        self.model = Sequential()
        self.model.add(Conv2D(8, (13, 13), input_shape=(self.in_shape[0], self.in_shape[1], 1)))
        self.model.add(BatchNormalization(axis=-1))
        self.model.add(Activation('relu'))
        self.model.add(Conv2D(8, (13, 13)))
        self.model.add(BatchNormalization(axis=-1))
        self.model.add(Activation('relu'))
        self.model.add(MaxPooling2D(pool_size=(2, 1)))
        self.model.add(Conv2D(8, (3, 3)))
        self.model.add(BatchNormalization(axis=-1))
        self.model.add(Activation('relu'))
        self.model.add(Conv2D(8, (1, 1)))
        self.model.add(BatchNormalization(axis=-1))
        self.model.add(Activation('relu'))
        self.model.add(MaxPooling2D(pool_size=(2, 1)))
        self.model.add(Flatten())
        self.model.add(Dense(64))
        self.model.add(BatchNormalization())
        self.model.add(Activation('relu'))
        self.model.add(Dropout(0.2))
        self.model.add(Dense(self.numLabels, activation='softmax'))
        self.model.compile(loss='binary_crossentropy', optimizer='adam',
                                metrics=['accuracy'])
        self.model.load_weights('speech_emotion_detection_ravdess_savee.h5')
    def predict_speech_emotion(self,filepath):
        if os.path.exists(filepath):
            print("last file name => ",filepath)
            X, sample_rate = librosa.load(filepath, res_type='kaiser_best',duration=2.5,sr=22050*2,offset=0.5)
            sample_rate = np.array(sample_rate)
            mfccs = librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=39)
            feature = mfccs
            feature = feature.reshape(39, 216, 1)
            # np_array = np.array([feature])
            np_array = np.array([feature])
            prediction = self.model.predict(np_array)
            np_argmax = np.argmax(prediction)
            result = self.classLabels[np_argmax]
            return result
    
## usage
# result = predict_speech_emotion(filepath)

